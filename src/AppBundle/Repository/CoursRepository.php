<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Cours;
use AppBundle\Entity\Salle;
use AppBundle\Entity\Type;
use UserBundle\Entity\User;
use AppBundle\Entity\Evenement;

/**
 * CoursRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CoursRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByAnimateurs(User $animateurs) {
        $qb = $this->createQueryBuilder('c')
            ->where(':animateurs MEMBER OF c.animateurs')
            ->orderBy('c.id', 'desc')
            ->setParameters(array('animateurs' => $animateurs) );
        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findByDanseurs(User $danseurs) {
        $qb = $this->createQueryBuilder('c')
            ->where(':danseurs MEMBER OF c.danseurs')
            ->setParameters(array('danseurs' => $danseurs) );
        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findByDanseursPasse(User $danseurs) {
        $qb = $this->createQueryBuilder('c')
            ->where(':danseurs MEMBER OF c.danseurs')
            ->andWhere(':date > c.dateDebut')
            ->orderBy('c.id', 'desc')
            ->setParameters(array('danseurs' => $danseurs , 'date' => new \DateTime()) );
        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findByDanseursVenir(User $danseurs) {
        $qb = $this->createQueryBuilder('c')
            ->where(':danseurs MEMBER OF c.danseurs')
            ->andWhere(':date <= c.dateDebut')
            ->setParameters(array('danseurs' => $danseurs , 'date' => new \DateTime()) );
        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findByType(Type $type, User $user, $datetime){
        $qb = $this->createQueryBuilder('c')
            ->where(':type = c.type')
            ->andWhere(':danseur NOT MEMBER OF c.danseurs')
            ->andWhere('c.dateDebut > :date')
            ->setParameters(['type' => $type , 'danseur' => $user, 'date' => $datetime]);
        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findByAnimateurPasse(User $user) {
        $qb = $this->createQueryBuilder('c')
            ->where(':danseurs MEMBER OF c.danseurs')
            ->andWhere(':date > c.dateDebut')
            ->orderBy('c.id', 'desc')
            ->setParameters(array('danseurs' => $user , 'date' => new \DateTime()) );
        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findByAnimateurVenir(User $user) {
        $qb = $this->createQueryBuilder('c')
            ->where(':animateurs MEMBER OF c.animateurs')
            ->andWhere(':date <= c.dateDebut')
            ->orderBy('c.id', 'desc')
            ->setParameters(array('animateurs' => $user , 'date' => new \DateTime()) );
        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findBySalleAndDateDebut(Salle $salle, $debut){
        $qb = $this->createQueryBuilder('c')
            ->where(':salle = c.salle')
            ->andWhere('c.dateDebut LIKE :debut')
            ->setParameters([ 'salle'=>$salle , 'debut'=>$debut .'%']);
        return $qb
            ->getQuery()
            ->getResult();
    }

}

